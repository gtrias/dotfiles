" Genar Vim Settings

" Changing leader key to ,
let mapleader=","

" General settings
syntax enable
set nocompatible
set encoding=utf-8
set autowrite
set timeoutlen=500
set hidden
set mouse=a
set nowrap

" Folding settings
set foldmethod=indent
set foldnestmax=15
set nofoldenable
set foldlevel=1

" Indent settings
set expandtab
set tabstop=4
set shiftwidth=4
set softtabstop=4
set smartindent
set autoindent
set cindent

" Fixing autoreload detection
set backupcopy=yes

if has("autocmd")
  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  " filetype plugin indent on
  " ...
endif

" Neobundle magic {{
    set runtimepath+=~/.vim/bundle/neobundle.vim/
    call neobundle#begin(expand('~/.vim/bundle'))
    source ~/.vim/custom/vimrc.bundles
    NeoBundleCheck
    call neobundle#end()
" }}

" Gui settings {{
set number
set ruler
set t_Co=256
set laststatus=2
" }}

" Sets current directory every time we open a buffer
autocmd BufEnter * silent! lcd %:p:h

" gitgutter settings
" let g:gitgutter_sign_added = '++'
" let g:gitgutter_sign_modified = 'MM'
" let g:gitgutter_sign_removed = '--'
" let g:gitgutter_sign_modified_removed = 'M-'

filetype plugin indent on


" Vimshell tunning
let g:vimshell_prompt_expr =
        \ 'escape(fnamemodify(getcwd(), ":~").">", "\\[]()?! ")." "'
        let g:vimshell_prompt_pattern = '^\%(\f\|\\.\)\+> '


filetype plugin indent on

" Colorstyles
highlight LineNr ctermfg=darkgrey
highlight SignColumn ctermbg=black
highlight Folded ctermfg=11 ctermbg=23

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Persistent undo  {
    " tell it to use an undo file
    set undofile
    " set a directory to store the undo history
    set undodir=~/.vim/.vimundo/
" }

autocmd FileType php setlocal omnifunc=phpcomplete_extended#CompletePHP

" vim easymotion
map <Leader> <Plug>(easymotion-prefix)

" Loading external configs
" Syntastic prefs {
    source ~/.vim/custom/syntastic.vim
" }

" Vim Symfony (https://github.com/docteurklein/vim-symfony) {
    source ~/.vim/custom/vim-symfony.vim
" }

" Vim Solarized settings {
    source ~/.vim/custom/colorscheme.vim
" }

" Vim custom shortcuts {
    source ~/.vim/custom/shortcuts.vim
" }

" Vim autocomplete confs {
    source ~/.vim/custom/autocomplete.vim
" }

" Vim Startify confs {
    source ~/.vim/custom/startify.vim
" }

" Vim indent guides confs {
    source ~/.vim/custom/indent-guides.vim
" }
"
" Vim javascript stuff {
    source ~/.vim/custom/javascript.vim
" }
"
" Vim ctrlspace stuff {
    source ~/.vim/custom/ctrlspace.vim
" }
"
" vimwiki stuff {
    source ~/.vim/custom/vimwiki.vim
" }

" Strip trailing whitespaces and save cursor position
" ref http://vim.wikia.com/wiki/Remove_unwanted_spaces {{
    function! StripTrailingWhitespace()
        normal mZ
        let l:chars = col("$")
        %s/\s\+$//e
        if (line("'Z") != line(".")) || (l:chars != col("$"))
            echo "Trailing whitespace stripped\n"
        endif
        normal `Z
    endfunction

    autocmd BufWritePre * :call StripTrailingWhitespace()
" }}


" Tag file loading {{
    set tags=./tags;/
" }}

" Saving vim status on exit, per directory (Go away and come back)
" {{
"
" Creates a session
    :let g:session_autoload = 'yes'
    :let g:session_autosave = 'yes'
" }}

" Load per project vimrc if exists {{
    let b:projectconf = getcwd() . "/.vimrc.project"
    if (filereadable(b:projectconf))
        exe "source" . b:projectconf
    endif
" }}

" JSBeautify
map <c-f> :call JsBeautify()<cr>
"
